import os
from datetime import datetime
from typing import Optional, Dict, Any

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import plotly.graph_objects as go
import streamlit as st
from joblib import load
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

# Importa√ß√µes do seu projeto
from src.config.params import Params
from src.data.data_loader import DataLoader
from src.models.feature_engineer import FeatureEngineer
from src.utils.risk_analyzer import RiskAnalyzer

# Configura√ß√£o da p√°gina
st.set_page_config(layout="wide", page_title="An√°lise Preditiva de Ativos", page_icon="üìà")


class RelatorioAnalitico:
    """Gera relat√≥rios explicativos autom√°ticos baseados nos resultados do modelo."""

    @staticmethod
    def gerar_explicacao_threshold(threshold: float, metricas: Dict[str, Any]) -> str:
        """Gera explica√ß√£o personalizada para o threshold do modelo."""

        if threshold < 0.45:
            estilo = "agressivo"
            razao = "baixo threshold"
            explicacao = f"""
            **Estrat√©gia √Ågil (Threshold: {threshold:.3f})**

            Seu modelo opera com um threshold de **{threshold:.3f}**, o que indica uma estrat√©gia mais **√°gil e sens√≠vel**.

            **Por que isso aconteceu?**
            - O modelo identificou que este ativo responde melhor a sinais mais frequentes
            - O mercado para este ativo apresenta movimentos mais sutis que requerem sensibilidade
            - O balanceamento entre precis√£o e recall favoreceu capturar mais oportunidades

            **Implica√ß√µes:**
            ‚úÖ Maior n√∫mero de oportunidades identificadas  
            ‚ö†Ô∏è Maior chance de falsos positivos  
            üìà Ideal para mercados com movimentos frequentes mas de menor amplitude
            """
        elif threshold < 0.55:
            estilo = "balanceado"
            razao = "threshold moderado"
            explicacao = f"""
            **Estrat√©gia Balanceada (Threshold: {threshold:.3f})**

            Seu modelo opera com um threshold de **{threshold:.3f}**, indicando uma estrat√©gia **equilibrada** entre sensibilidade e precis√£o.

            **Por que isso aconteceu?**
            - O modelo encontrou um ponto √≥timo entre capturar oportunidades e evitar ru√≠do
            - O ativo apresenta um comportamento de mercado t√≠pico sem extremos
            - A rela√ß√£o risco-retorno √© mais balanceada neste patamar

            **Implica√ß√µes:**
            ‚úÖ Bom equil√≠brio entre oportunidades e confiabilidade  
            ‚öñÔ∏è Balanceamento ideal para maioria dos cen√°rios de mercado  
            üìä Performance consistente em diferentes condi√ß√µes
            """
        else:
            estilo = "conservador"
            razao = "alto threshold"
            explicacao = f"""
            **Estrat√©gia Conservadora (Threshold: {threshold:.3f})**

            Seu modelo opera com um threshold de **{threshold:.3f}**, indicando uma estrat√©gia **conservadora e de alta confian√ßa**.

            **Por que isso aconteceu?**
            - O ativo apresenta movimentos bruscos que exigem maior confian√ßa nas previs√µes
            - O modelo priorizou evitar falsos positivos em detrimento de capturar mais oportunidades
            - O mercado para este ativo tem caracter√≠sticas que favorecem esperar por sinais mais claros

            **Implica√ß√µes:**
            ‚úÖ Alta confiabilidade nos sinais gerados  
            ‚ö†Ô∏è Menor frequ√™ncia de oportunidades identificadas  
            üõ°Ô∏è Prote√ß√£o contra falsos positivos em mercados vol√°teis
            """

        return explicacao, estilo, razao

    @staticmethod
    def gerar_analise_performance(metricas_wfv: Dict[str, Any], previsao_atual: Dict[str, Any]) -> str:
        """Gera an√°lise de performance baseada nas m√©tricas de valida√ß√£o."""

        sharpe = metricas_wfv.get('sharpe_medio', 0)
        f1 = metricas_wfv.get('f1_macro_medio', 0)
        trades = metricas_wfv.get('trades_medio', 0)
        proba = previsao_atual.get('probabilidade', 0.5)

        # An√°lise do Sharpe Ratio
        if sharpe > 0.5:
            analise_sharpe = f"Excelente performance de risco-retorno (Sharpe: {sharpe:.2f})"
        elif sharpe > 0.2:
            analise_sharpe = f"Boa performance de risco-retorno (Sharpe: {sharpe:.2f})"
        elif sharpe > 0:
            analise_sharpe = f"Performance moderada de risco-retorno (Sharpe: {sharpe:.2f})"
        else:
            analise_sharpe = f"Performance abaixo do esperado (Sharpe: {sharpe:.2f})"

        # An√°lise da qualidade preditiva
        if f1 > 0.6:
            analise_f1 = f"Alta qualidade preditiva (F1: {f1:.2%})"
        elif f1 > 0.45:
            analise_f1 = f"Qualidade preditiva adequada (F1: {f1:.2%})"
        else:
            analise_f1 = f"Qualidade preditiva limitada (F1: {f1:.2%})"

        # An√°lise da frequ√™ncia de opera√ß√µes
        if trades > 5:
            analise_trades = f"Alta frequ√™ncia de opera√ß√µes ({trades:.1f} trades/periodo)"
        elif trades > 2:
            analise_trades = f"Frequ√™ncia moderada de opera√ß√µes ({trades:.1f} trades/periodo)"
        else:
            analise_trades = f"Baixa frequ√™ncia de opera√ß√µes ({trades:.1f} trades/periodo)"

        # An√°lise da previs√£o atual
        if proba > 0.7:
            analise_atual = f"Sinal atual de ALTA confian√ßa ({proba:.1%})"
        elif proba > 0.55:
            analise_atual = f"Sinal atual de confian√ßa MODERADA ({proba:.1%})"
        else:
            analise_atual = f"Sinal atual de BAIXA confian√ßa ({proba:.1%})"

        return f"""
        ## üìä An√°lise de Performance

        **Desempenho do Modelo:**
        - {analise_sharpe}
        - {analise_f1}
        - {analise_trades}

        **Previs√£o Atual:**
        - {analise_atual}

        **Recomenda√ß√£o Baseada no Hist√≥rico:**
        {RelatorioAnalitico._gerar_recomendacao(sharpe, f1, proba)}
        """

    @staticmethod
    def _gerar_recomendacao(sharpe: float, f1: float, proba: float) -> str:
        """Gera recomenda√ß√£o baseada nas m√©tricas."""

        if sharpe > 0.3 and f1 > 0.5:
            if proba > 0.6:
                return "‚úÖ **CONFIAN√áA ALTA** - O modelo tem hist√≥rico s√≥lido e o sinal atual √© forte"
            else:
                return "‚ö†Ô∏è **CONFIAN√áA MODERADA** - Modelo com bom hist√≥rico mas sinal atual fraco"
        else:
            if proba > 0.6:
                return "‚ö†Ô∏è **CONFIAN√áA MODERADA** - Sinal atual forte mas hist√≥rico do modelo limitado"
            else:
                return "üî¥ **CONFIAN√áA BAIXA** - Hist√≥rico limitado e sinal atual fraco"

    @staticmethod
    def gerar_analise_mercado(precos: pd.Series, df_ibov: pd.DataFrame) -> str:
        """Gera an√°lise contextual do mercado."""

        retorno_30d = (precos.iloc[-1] / precos.iloc[-30] - 1) * 100 if len(precos) >= 30 else 0
        volatilidade_30d = precos.pct_change().std() * np.sqrt(252) * 100 if len(precos) >= 30 else 0

        # An√°lise de tend√™ncia
        if retorno_30d > 5:
            tendencia = "forte alta"
        elif retorno_30d > 2:
            tendencia = "alta moderada"
        elif retorno_30d > -2:
            tendencia = "lateralizada"
        elif retorno_30d > -5:
            tendencia = "baixa moderada"
        else:
            tendencia = "forte baixa"

        # An√°lise de volatilidade
        if volatilidade_30d > 40:
            vol_texto = "muito alta"
        elif volatilidade_30d > 30:
            vol_texto = "alta"
        elif volatilidade_30d > 20:
            vol_texto = "moderada"
        else:
            vol_texto = "baixa"

        return f"""
        ## üåç Contexto de Mercado

        **An√°lise do Ativo:**
        - Tend√™ncia dos √∫ltimos 30 dias: **{tendencia}** ({retorno_30d:.1f}%)
        - Volatilidade anualizada: **{vol_texto}** ({volatilidade_30d:.1f}%)

        **Condi√ß√µes Atuais:**
        - Pre√ßo atual: R$ {precos.iloc[-1]:.2f}
        - Varia√ß√£o recente: {'üìà' if retorno_30d > 0 else 'üìâ'} {abs(retorno_30d):.1f}%

        **Recomenda√ß√£o de Aloca√ß√£o:**
        {RelatorioAnalitico._gerar_recomendacao_alocacao(retorno_30d, volatilidade_30d)}
        """

    @staticmethod
    def _gerar_recomendacao_alocacao(retorno: float, volatilidade: float) -> str:
        """Gera recomenda√ß√£o de aloca√ß√£o baseada em retorno e volatilidade."""

        if volatilidade > 35:
            return "‚ö° **ALTA VOLATILIDADE** - Considerar posicionamentos menores e prote√ß√µes"
        elif volatilidade > 25:
            if retorno > 0:
                return "üìä **MOMENTO FAVOR√ÅVEL** - Mercado com tend√™ncia positiva e volatilidade moderada"
            else:
                return "‚ö†Ô∏è **MOMENTO CAUTELOSO** - Mercado em baixa com volatilidade moderada"
        else:
            if retorno > 0:
                return "‚úÖ **CONDI√á√ïES FAVOR√ÅVEIS** - Baixa volatilidade com tend√™ncia positiva"
            else:
                return "üîÑ **MOMENTO DE ESPERA** - Baixa volatilidade mas sem dire√ß√£o definida"


class DashboardTrading:
    """Dashboard para An√°lise Preditiva de Ativos, com foco em clareza e metodologia."""

    def __init__(self):
        self.modelo_carregado = None
        self.ticker_selecionado = None
        self._inicializar_sidebar()

    def _inicializar_sidebar(self):
        """Inicializa a barra lateral com os controles do usu√°rio."""
        with st.sidebar:
            st.markdown("## üìà An√°lise Preditiva de Ativos")

            # Informa√ß√£o de data/hora da √∫ltima atualiza√ß√£o
            st.caption(f"√öltima atualiza√ß√£o: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}")

            # Carregar modelos dispon√≠veis
            modelos_disponiveis = [f.replace('modelo_', '').replace('.joblib', '')
                                   for f in os.listdir(Params.PATH_MODELOS)
                                   if f.endswith('.joblib')]

            if not modelos_disponiveis:
                st.warning("Nenhum modelo treinado foi encontrado na pasta 'modelos_treinados'.")
                st.stop()

            self.ticker_selecionado = st.selectbox(
                "Selecione o Ativo:",
                sorted(modelos_disponiveis),
                help="Selecione o ativo para an√°lise preditiva"
            )

            self.analisar_btn = st.button("üîç Gerar An√°lise Completa", type="primary", use_container_width=True)
            self.gerar_relatorio_btn = st.button("üìã Gerar Relat√≥rio Explicativo", use_container_width=True)

            st.markdown("---")

            # Informa√ß√µes expand√≠veis
            with st.expander("‚ÑπÔ∏è Sobre este dashboard"):
                st.info("""
                Este √© um projeto acad√™mico que demonstra um pipeline de Machine Learning para 
                prever a dire√ß√£o de ativos da B3. 

                **N√£o constitui uma recomenda√ß√£o formal de investimento.**
                """)

    @st.cache_resource(ttl=3600)  # Cache por 1 hora
    def _carregar_modelo(_self, ticker: str) -> Optional[Any]:
        """Carrega o modelo treinado do disco."""
        caminho = os.path.join(Params.PATH_MODELOS, f"modelo_{ticker}.joblib")
        if os.path.exists(caminho):
            try:
                return load(caminho)
            except Exception as e:
                st.error(f"Erro ao carregar o modelo: {e}")
        return None

    def executar(self):
        """Orquestra a apresenta√ß√£o completa da an√°lise."""
        if not self.ticker_selecionado:
            return

        st.header(f"An√°lise Preditiva para {self.ticker_selecionado}")

        if self.analisar_btn or self.gerar_relatorio_btn:
            with st.spinner("Carregando modelo e processando dados..."):
                self.modelo_carregado = self._carregar_modelo(self.ticker_selecionado)

            if self.modelo_carregado is None:
                st.error(
                    f"O modelo para {self.ticker_selecionado} n√£o foi encontrado. Verifique se o treinamento foi bem-sucedido.")
                return

            with st.spinner("Processando dados e gerando an√°lise..."):
                loader = DataLoader()
                feature_engineer = FeatureEngineer()

                try:
                    df_ticker, df_ibov = loader.baixar_dados_yf(self.ticker_selecionado)
                except Exception:
                    st.warning(
                        "**Aviso:** N√£o foi poss√≠vel baixar os dados mais recentes. A an√°lise abaixo √© baseada nos √∫ltimos dados dispon√≠veis no banco de dados local.")
                    df_ticker = loader.carregar_do_bd(self.ticker_selecionado)
                    df_ibov = pd.DataFrame()

                if df_ticker.empty:
                    st.error(
                        f"N√£o foi poss√≠vel carregar nenhum dado para {self.ticker_selecionado}, nem da internet nem do banco de dados.")
                    return

                X_full, y_full, precos_full, t1_full = feature_engineer.preparar_dataset(df_ticker, df_ibov,
                                                                                         self.ticker_selecionado)
                previsao = self.modelo_carregado.prever_direcao(X_full.tail(1), self.ticker_selecionado)

            # Gerar relat√≥rio explicativo se solicitado
            if self.gerar_relatorio_btn:
                self._render_relatorio_completo(previsao, precos_full, df_ibov)
            else:
                # Abas normais de an√°lise
                tab1, tab2, tab3, tab4 = st.tabs([
                    "üéØ **Resumo Executivo**",
                    "üìà **Performance Validada**",
                    "üìä **Simula√ß√£o Ilustrativa**",
                    "üß¨ **DNA do Modelo**"
                ])

                with tab1:
                    self._render_tab_resumo(previsao, X_full, precos_full)

                with tab2:
                    self._render_tab_performance(y_full)

                with tab3:
                    self._render_tab_simulacao(X_full, precos_full)

                with tab4:
                    self._render_tab_dna()
        else:
            st.info("‚¨ÖÔ∏è Para come√ßar, selecione um ativo na barra lateral e clique em 'Gerar An√°lise Completa'.")

            # Adicionar explica√ß√£o inicial
            st.markdown("---")
            st.subheader("Bem-vindo ao Sistema de An√°lise Preditiva")

            col1, col2 = st.columns(2)

            with col1:
                st.markdown("""
                ### üìã Como funciona:
                1. **Selecione um ativo** na barra lateral
                2. **Clique em 'Gerar An√°lise Completa'**
                3. **Explore os resultados** atrav√©s das abas

                ### üîç Metodologia:
                - Modelo de Machine Learning (LightGBM)
                - Valida√ß√£o Walk-Forward robusta
                - Sistema de Tripla Barreira para labeling
                - 30+ indicadores t√©cnicos como features
                """)

            with col2:
                st.markdown("""
                ### üìä O que voc√™ ver√°:
                - **Previs√£o** para o pr√≥ximo preg√£o
                - **Performance hist√≥rica validada** (WFV)
                - **Simula√ß√£o ilustrativa** do modelo
                - **Transpar√™ncia completa** da metodologia

                ### ‚ö†Ô∏è Importante:
                Este √© um projeto **acad√™mico** para demonstra√ß√£o de t√©cnicas de ML aplicadas ao mercado financeiro.
                **N√£o constitui recomenda√ß√£o de investimento.**
                """)

    def _render_relatorio_completo(self, previsao: Dict[str, Any], precos: pd.Series, df_ibov: pd.DataFrame):
        """Renderiza um relat√≥rio explicativo completo."""

        st.title(f"üìã Relat√≥rio Anal√≠tico - {self.ticker_selecionado}")
        st.markdown(f"*Gerado em {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}*")
        st.markdown("---")

        # Se√ß√£o 1: Explica√ß√£o do Threshold
        threshold = self.modelo_carregado.threshold_operacional
        explicacao_threshold, estilo, razao = RelatorioAnalitico.gerar_explicacao_threshold(
            threshold, self.modelo_carregado.wfv_metrics
        )

        st.markdown("## üéØ An√°lise da Estrat√©gia do Modelo")
        st.markdown(explicacao_threshold)

        # Visualiza√ß√£o do threshold
        fig = go.Figure()
        fig.add_trace(go.Indicator(
            mode="gauge+number+delta",
            value=threshold * 100,
            domain={'x': [0, 1], 'y': [0, 1]},
            title={'text': "N√≠vel de Confian√ßa Requerido (Threshold)"},
            gauge={
                'axis': {'range': [None, 100]},
                'bar': {'color': "darkblue"},
                'steps': [
                    {'range': [0, 45], 'color': "lightgreen"},
                    {'range': [45, 55], 'color': "lightyellow"},
                    {'range': [55, 100], 'color': "lightcoral"}
                ],
                'threshold': {
                    'line': {'color': "red", 'width': 4},
                    'thickness': 0.75,
                    'value': threshold * 100
                }
            }
        ))
        fig.update_layout(height=300)
        st.plotly_chart(fig, use_container_width=True)

        # Se√ß√£o 2: An√°lise de Performance
        st.markdown(RelatorioAnalitico.gerar_analise_performance(
            self.modelo_carregado.wfv_metrics, previsao
        ))

        # Se√ß√£o 3: An√°lise de Mercado
        st.markdown(RelatorioAnalitico.gerar_analise_mercado(precos, df_ibov))

        # Se√ß√£o 4: Recomenda√ß√µes Espec√≠ficas
        st.markdown("""
        ## üéØ Recomenda√ß√µes Espec√≠ficas

        **Para Investidores Conservadores:**
        - Espere por sinais com confian√ßa acima de 70%
        - Considere posicionamentos menores devido √† volatilidade
        - Use stops para proteger o capital

        **Para Investidores Moderados:**
        - Opere dentro dos limites do seu plano de risco
        - Diversifique entre diferentes oportunidades
        - Monitore regularmente as posi√ß√µes

        **Para Investidores Agressivos:**
        - Pode considerar operar com confian√ßa acima de 55%
        - Esteja preparado para maior volatilidade
        - Tenha disciplina para seguir o plano
        """)

        # Se√ß√£o 5: Pr√≥ximos Passos
        st.markdown("""
        ## üîÆ Pr√≥ximos Passos Recomendados

        1. **Monitore** o comportamento do ativo nos pr√≥ximos dias
        2. **Avalie** se a previs√£o se concretiza
        3. **Ajuste** sua estrat√©gia com base nos resultados
        4. **Considere** diversificar com outros ativos
        5. **Revise** periodicamente as previs√µes do modelo
        """)

        st.markdown("---")
        st.success("""
        **üìä Este relat√≥rio foi gerado automaticamente com base na an√°lise algor√≠tmica**
        *Lembre-se: nenhum modelo √© perfeito e o passado n√£o garante resultados futuros.*
        """)

    # --- M√âTODOS PARA RENDERIZAR AS ABAS ---

    def _render_tab_resumo(self, previsao: Dict[str, Any], X_full: pd.DataFrame, precos_full: pd.Series):
        """Renderiza a aba 'Resumo Executivo'."""
        st.subheader("Conclus√£o para o Pr√≥ximo Preg√£o")

        # Adicionar informa√ß√£o de data
        cols_data = st.columns(2)
        last_date = X_full.index[-1].strftime('%d/%m/%Y')
        next_date = (X_full.index[-1] + pd.tseries.offsets.BDay(1)).strftime('%d/%m/%Y')
        cols_data[0].markdown(f"**üìÖ √öltimo dado analisado:** {last_date}")
        cols_data[1].markdown(f"**üîÆ Previs√£o para o preg√£o de:** {next_date}")

        if previsao.get('status') != 'sucesso':
            st.error(f"N√£o foi poss√≠vel gerar a previs√£o: {previsao.get('status')}")
            return

        st.divider()

        # Determinar for√ßa do sinal baseado na probabilidade
        probabilidade = previsao['probabilidade']
        if probabilidade >= 0.7:
            forca_sinal = "üü¢ ALTA"
            cor_barra = "#00cc00"
            icon = "üìà"
        elif probabilidade >= 0.55:
            forca_sinal = "üü° M√âDIA"
            cor_barra = "#ffcc00"
            icon = "‚û°Ô∏è"
        else:
            forca_sinal = "üî¥ BAIXA"
            cor_barra = "#ff4d4d"
            icon = "üìâ"

        cols_metricas = st.columns(3)
        direcao = "ALTA" if previsao['predicao'] == 1 else "NEUTRA"
        recomendacao = "üü¢ OPORTUNIDADE" if previsao['should_operate'] else "üëÄ OBSERVAR"

        cols_metricas[0].metric("Sinal Derivado", recomendacao,
                                help="Recomenda√ß√£o baseada na an√°lise do modelo: Operar ou Observar")

        cols_metricas[1].metric("Cen√°rio Mais Prov√°vel", f"{icon} {direcao}",
                                help="A dire√ß√£o que o pre√ßo tem maior probabilidade de seguir, segundo o modelo.")

        cols_metricas[2].metric("For√ßa do Sinal", forca_sinal,
                                help="Intensidade da confian√ßa do modelo na previs√£o")

        # Barra de progresso colorida baseada na for√ßa do sinal
        st.markdown(f"""
        <div style="background-color: #f0f2f6; border-radius: 10px; padding: 5px; margin: 10px 0;">
            <div style="background-color: {cor_barra}; width: {probabilidade * 100}%; 
                       height: 20px; border-radius: 8px; display: flex; align-items: center; 
                       justify-content: center; color: white; font-weight: bold;">
                {probabilidade:.1%} de Confian√ßa
            </div>
        </div>
        """, unsafe_allow_html=True)

        # Explica√ß√£o do significado
        with st.expander("üìñ O que significa esta previs√£o?"):
            if previsao['should_operate']:
                st.success("""
                **üü¢ OPORTUNIDADE**: O modelo identificou um padr√£o que historicamente precede movimentos de alta 
                com confian√ßa suficiente para considerar uma opera√ß√£o.
                """)
            else:
                st.info("""
                **üëÄ OBSERVAR**: O modelo n√£o identificou um padr√£o suficientemente forte para recomendar uma opera√ß√£o 
                no pr√≥ximo preg√£o. Recomenda-se aguardar melhores oportunidades.
                """)

        st.subheader("Contexto de Pre√ßos Recentes")
        self._plot_precos_recentes(precos_full.iloc[-60:])

        # Compara√ß√£o com IBOV (se dispon√≠vel)
        try:
            loader = DataLoader()
            _, df_ibov = loader.baixar_dados_yf(self.ticker_selecionado)
            if not df_ibov.empty and 'Close_IBOV' in df_ibov.columns:
                st.subheader("Compara√ß√£o com IBOVESPA")
                self._plot_comparacao_ibov(precos_full.iloc[-60:], df_ibov['Close_IBOV'].iloc[-60:])
        except:
            pass

    def _render_tab_performance(self, y_full: pd.Series):
        """Renderiza a aba 'Performance Validada'."""
        st.subheader("Desempenho Hist√≥rico Validado (Out-of-Sample)")

        # Informa√ß√£o sobre valida√ß√£o walk-forward
        with st.expander("üîç Sobre a Valida√ß√£o Walk-Forward"):
            st.info("""
            **Por que esta √© a m√©trica mais importante?**

            A Valida√ß√£o Walk-Forward √© um m√©todo que:
            - Testa o modelo em dados que ele **nunca viu** durante o treinamento
            - Simula realisticamente como o modelo se comportaria no mercado real
            - Elimina o **vazamento de informa√ß√£o** entre per√≠odos de treino e teste
            - Fornece estimativas **confi√°veis** da performance futura

            Os resultados abaixo s√£o desta valida√ß√£o robusta, n√£o de backtest em dados j√° conhecidos.
            """)

        metricas = self.modelo_carregado.wfv_metrics
        cols = st.columns(3)

        cols[0].metric("Sharpe Ratio (M√©dio)", f"{metricas.get('sharpe_medio', 0):.2f}",
                       help="Mede o retorno da estrat√©gia ajustado ao risco. Valores acima de 0.3 indicam bom desempenho.")

        cols[1].metric("Trades por Per√≠odo (M√©dia)", f"{metricas.get('trades_medio', 0):.1f}",
                       help="Frequ√™ncia m√©dia de opera√ß√µes da estrat√©gia.")

        cols[2].metric("Qualidade da Classifica√ß√£o (F1)", f"{metricas.get('f1_macro_medio', 0):.2%}",
                       help="Mede o qu√£o bem o modelo classifica os movimentos do mercado.")

        # Interpreta√ß√£o dos resultados
        sharpe = metricas.get('sharpe_medio', 0)
        if sharpe > 0.5:
            st.success("‚úÖ Performance s√≥lida - O modelo demonstra boa capacidade de gerar retornos ajustados ao risco.")
        elif sharpe > 0:
            st.info("üìä Performance moderada - O modelo tem algum poder preditivo, mas com margem para melhorias.")
        else:
            st.warning("‚ö†Ô∏è Performance abaixo do esperado - O modelo n√£o demonstra capacidade consistente de previs√£o.")

        st.subheader("An√°lise de Acertos e Erros (√öltima Valida√ß√£o)")
        self._plot_matriz_confusao(y_full)

        # Adicionar m√©tricas adicionais de performance
        st.subheader("M√©tricas Adicionais de Performance")
        col1, col2 = st.columns(2)

        with col1:
            st.metric("Folds V√°lidos", metricas.get('folds_validos', 0),
                      help="N√∫mero de per√≠odos de valida√ß√£o com dados suficientes para avalia√ß√£o")

        with col2:
            win_rate = self._calcular_win_rate_estimado(metricas)
            st.metric("Taxa de Acerto Estimada", f"{win_rate:.1%}",
                      help="Taxa estimada de previs√µes corretas baseada no F1-Score")

    def _render_tab_simulacao(self, X_full: pd.DataFrame, precos_full: pd.Series):
        """Renderiza a aba 'Simula√ß√£o Ilustrativa'."""
        st.subheader("Simula√ß√£o de Portf√≥lio (Backtest em Dados Completos)")

        # Aviso importante sobre a simula√ß√£o
        st.warning("""
        **‚ö†Ô∏è AVISO IMPORTANTE:** 

        Esta simula√ß√£o √© **'in-sample'** (executada sobre todo o hist√≥rico conhecido). 
        Seus resultados tendem a ser **otimistas** e servem principalmente para **ilustrar o comportamento** da estrat√©gia.

        A performance real √© melhor representada pela **Valida√ß√£o Walk-Forward** (aba anterior).
        """)

        with st.spinner("Gerando gr√°ficos da simula√ß√£o..."):
            risk_analyzer = RiskAnalyzer()
            threshold_simulacao = self.modelo_carregado.threshold_operacional * 0.95
            df_sinais = self.modelo_carregado.prever_e_gerar_sinais(X_full, precos_full, self.ticker_selecionado,
                                                                    threshold_override=threshold_simulacao)
            backtest_info = risk_analyzer.backtest_sinais(df_sinais)

        st.plotly_chart(self._plot_precos_sinais(df_sinais, precos_full), use_container_width=True)

        if backtest_info.get('trades', 0) > 0:
            self._exibir_metricas_backtest(backtest_info)

            c1, c2 = st.columns(2)
            with c1:
                st.plotly_chart(self._plot_equidade(backtest_info), use_container_width=True)
            with c2:
                st.plotly_chart(self._plot_drawdown(backtest_info), use_container_width=True)

            # Adicionar an√°lise de risco
            st.subheader("An√°lise de Risco da Simula√ß√£o")
            self._analise_risco(backtest_info)
        else:
            st.info("Nenhuma opera√ß√£o foi realizada nesta simula√ß√£o ilustrativa.")

    def _render_tab_dna(self):
        """Renderiza a aba 'DNA do Modelo'."""
        st.subheader("Ficha T√©cnica do Modelo")
        caminho_modelo = os.path.join(Params.PATH_MODELOS, f"modelo_{self.ticker_selecionado}.joblib")
        data_treino = datetime.fromtimestamp(os.path.getmtime(caminho_modelo)).strftime('%d/%m/%Y √†s %H:%M')

        # Determinar estilo da estrat√©gia baseado no threshold
        threshold = self.modelo_carregado.threshold_operacional
        if threshold <= 0.45:
            estilo_estrategia = "üîÑ √Ågil - Captura mais oportunidades"
            descricao_estilo = "Estrat√©gia configurada para ser mais sens√≠vel, capturando movimentos com confian√ßa moderada para maximizar oportunidades."
        elif threshold <= 0.55:
            estilo_estrategia = "‚öñÔ∏è Balanceada - Equil√≠brio risco/retorno"
            descricao_estilo = "Estrat√©gia equilibrada entre sensibilidade e precis√£o, buscando o melhor balan√ßo entre quantidade e qualidade de sinais."
        else:
            estilo_estrategia = "üéØ Conservadora - Alta confian√ßa"
            descricao_estilo = "Estrat√©gia conservadora que opera apenas quando h√° alta confian√ßa, priorizando precis√£o sobre quantidade."

        ficha_tecnica = {
            "Ativo-Alvo": self.ticker_selecionado,
            "√öltimo Treinamento": data_treino,
            "Tipo de Modelo": "LightGBM Classifier",
            "Estilo da Estrat√©gia": estilo_estrategia,
            "Threshold Operacional": f"{threshold:.3f}",
            "N√∫mero de Features": len(self.modelo_carregado.features_selecionadas)
        }

        # Exibir ficha t√©cnica em formato de tabela
        for chave, valor in ficha_tecnica.items():
            st.write(f"**{chave}:** {valor}")

        # Explica√ß√£o do estilo
        st.info(f"**{estilo_estrategia}** - {descricao_estilo}")

        st.subheader("O que o Modelo Considera Mais Importante?")
        st.info(
            "O gr√°fico abaixo mostra as 15 vari√°veis que o modelo mais utilizou para tomar suas decis√µes:"
        )
        self._plot_importancia_features()

        st.subheader("Fundamentos da Metodologia")

        with st.expander("üîç Como o Modelo Toma Decis√µes"):
            st.markdown("""
            **Sistema de Classifica√ß√£o com Limiar Adaptativo**

            Este modelo n√£o trabalha com "certezas absolutas". Em vez disso:

            ‚Ä¢ **Analisa padr√µes** hist√≥ricos para estimar probabilidades
            ‚Ä¢ **Ajusta automaticamente** sua sensibilidade para cada ativo
            ‚Ä¢ **Busca o ponto √≥timo** entre capturar oportunidades e evitar falsos sinais
            ‚Ä¢ **A estrat√©gia √© calibrada** para maximizar o retorno ajustado ao risco (Sharpe Ratio)

            O 'limiar de confian√ßa' √© definido estatisticamente durante o treinamento para otimizar performance.
            """)

        with st.expander("üìä Processo de Valida√ß√£o"):
            st.markdown("""
            **Walk-Forward com Purga**

            Para garantir resultados realistas:

            ‚Ä¢ **Simula a passagem do tempo** testando em dados nunca vistos
            ‚Ä¢ **Elimina vazamento de informa√ß√£o** entre per√≠odos de treino e teste  
            ‚Ä¢ **Proporciona estimativas confi√°veis** da performance futura
            ‚Ä¢ **Os resultados mostrados** s√£o desta valida√ß√£o robusta
            """)

        with st.expander("üéØ Sistema de Tripla Barreira"):
            st.markdown("""
            **Como definimos os alvos (labels) para o modelo:**

            Para cada ponto no tempo, analisamos se o pre√ßo:
            1. **Atingiu barreira superior** (ATR √ó 1.5) ‚Üí Sinal de ALTA (1)
            2. **Atingiu barreira inferior** (ATR √ó 1.0) ‚Üí Sinal de BAIXA (-1)
            3. **N√£o atingiu nenhuma** ‚Üí Sinal NEUTRO (0)

            Janela de an√°lise: 5 dias √† frente
            """)

    # --- M√âTODOS DE PLOTAGEM E AUXILIARES ---

    def _plot_precos_recentes(self, precos: pd.Series):
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=precos.index, y=precos, mode='lines', name='Fechamento', line=dict(color='#1f77b4')))
        fig.add_trace(go.Scatter(x=[precos.index[-1]], y=[precos.iloc[-1]], mode='markers', name='√öltimo Ponto',
                                 marker=dict(color='red', size=10, symbol='star')))
        fig.update_layout(
            height=300,
            margin=dict(l=20, r=20, t=40, b=20),
            yaxis_title='Pre√ßo (R$)',
            xaxis_title=None,
            showlegend=False
        )
        st.plotly_chart(fig, use_container_width=True)

    def _plot_comparacao_ibov(self, precos: pd.Series, ibov: pd.Series):
        """Plot de compara√ß√£o com IBOVESPA."""
        # Normalizar para base 100
        precos_norm = (precos / precos.iloc[0]) * 100
        ibov_norm = (ibov / ibov.iloc[0]) * 100

        fig = go.Figure()
        fig.add_trace(go.Scatter(x=precos_norm.index, y=precos_norm, mode='lines',
                                 name=self.ticker_selecionado, line=dict(color='#1f77b4')))
        fig.add_trace(go.Scatter(x=ibov_norm.index, y=ibov_norm, mode='lines',
                                 name='IBOVESPA', line=dict(color='#ff7f0e')))

        fig.update_layout(
            height=300,
            yaxis_title='Desempenho (Base 100)',
            legend=dict(yanchor="top", y=0.99, xanchor="left", x=0.01)
        )
        st.plotly_chart(fig, use_container_width=True)

    def _plot_matriz_confusao(self, y_full: pd.Series):
        try:
            # Recalcular previs√µes do √∫ltimo fold da valida√ß√£o para a matriz
            X_full_scaled = self.modelo_carregado.X_scaled
            y_full_encoded = self.modelo_carregado.label_encoder.transform(y_full)

            _, test_idx = list(self.modelo_carregado.cv_gen.split(X_full_scaled))[-1]

            X_test = X_full_scaled.iloc[test_idx]
            y_test_encoded = y_full_encoded[test_idx]
            y_test_labels = self.modelo_carregado.label_encoder.inverse_transform(y_test_encoded)

            preds_encoded = self.modelo_carregado.modelo_final.predict(X_test)
            preds_labels = self.modelo_carregado.label_encoder.inverse_transform(preds_encoded)

            cm = confusion_matrix(y_test_labels, preds_labels, labels=[-1, 0, 1])
            display_labels = ['BAIXA', 'NEUTRO', 'ALTA']

            fig, ax = plt.subplots()
            disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=display_labels)
            disp.plot(ax=ax, cmap='Blues', values_format='d')
            ax.set_title("Previs√µes vs. Realidade")
            st.pyplot(fig)

            # Adicionar an√°lise da matriz de confus√£o
            total = np.sum(cm)
            accuracy = np.trace(cm) / total if total > 0 else 0

            st.caption(f"""
            **An√°lise da Matriz de Confus√£o:**
            - Acur√°cia geral: {accuracy:.1%}
            - Diagonal principal (acertos): {np.trace(cm)} de {total} exemplos
            - Fora da diagonal (erros): {total - np.trace(cm)} exemplos
            """)

        except Exception as e:
            st.warning(f"N√£o foi poss√≠vel gerar a Matriz de Confus√£o: {e}")

    def _plot_precos_sinais(self, df_sinais: pd.DataFrame, precos: pd.Series) -> go.Figure:
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=precos.index, y=precos, mode='lines', name='Pre√ßo de Fechamento',
                                 line=dict(color='#1f77b4', width=2)))
        sinais_operar = df_sinais[df_sinais['sinal'] == 1]
        if not sinais_operar.empty:
            fig.add_trace(go.Scatter(x=sinais_operar.index, y=sinais_operar['preco'], mode='markers',
                                     name='Sinal de Oportunidade',
                                     marker=dict(color='limegreen', size=10, symbol='triangle-up',
                                                 line=dict(width=1, color='darkgreen'))))
        fig.update_layout(
            title_text='Pre√ßos Hist√≥ricos vs. Sinais da Estrat√©gia',
            xaxis_title='Data',
            yaxis_title='Pre√ßo (R$)',
            hovermode='x unified',
            legend=dict(yanchor="top", y=0.99, xanchor="left", x=0.01)
        )
        return fig

    def _plot_equidade(self, backtest_info: Dict[str, Any]) -> go.Figure:
        fig = go.Figure()
        curva_equidade = backtest_info.get('equity_curve', [])
        if len(curva_equidade) > 1:
            fig.add_trace(go.Scatter(
                x=np.arange(len(curva_equidade)),
                y=curva_equidade,
                mode='lines',
                name='Capital',
                line=dict(color='#2ca02c', width=2)
            ))

            # Adicionar linha de refer√™ncia em 1.0 (capital inicial)
            fig.add_hline(y=1.0, line_dash="dash", line_color="gray", opacity=0.7)

        fig.update_layout(
            title_text='Evolu√ß√£o do Capital',
            xaxis_title='N¬∫ da Opera√ß√£o',
            yaxis_title='Capital Relativo',
            height=350,
            showlegend=False
        )
        return fig

    def _plot_drawdown(self, backtest_info: Dict[str, Any]) -> go.Figure:
        fig = go.Figure()
        equity_curve = np.array(backtest_info.get('equity_curve', []))
        if len(equity_curve) > 1:
            running_max = np.maximum.accumulate(equity_curve)
            drawdown = (equity_curve - running_max) / running_max
            fig.add_trace(go.Scatter(
                x=np.arange(len(drawdown)),
                y=drawdown,
                fill='tozeroy',
                name='Drawdown',
                line=dict(color='red')
            ))

            # Adicionar linha de refer√™ncia em 0
            fig.add_hline(y=0, line_dash="dash", line_color="gray", opacity=0.7)

        fig.update_yaxes(tickformat=".0%")
        fig.update_layout(
            title_text='Curva de Drawdown',
            xaxis_title='N¬∫ da Opera√ß√£o',
            yaxis_title='Queda do Pico',
            height=350,
            showlegend=False
        )
        return fig

    def _analise_risco(self, backtest_info: Dict[str, Any]):
        """Analisa e exibe m√©tricas de risco."""
        retornos = backtest_info.get('retornos', [])
        if not retornos or len(retornos) == 0:
            st.info("Dados insuficientes para an√°lise de risco detalhada.")
            return

        col1, col2, col3 = st.columns(3)

        with col1:
            st.metric("VaR 95% (1 dia)", f"{np.percentile(retornos, 5):.2%}",
                      help="M√°xima perda esperada em 95% dos casos (Value at Risk)")

        with col2:
            st.metric("CVaR 95% (1 dia)", f"{np.mean([r for r in retornos if r <= np.percentile(retornos, 5)]):.2%}",
                      help="Perda m√©dia nos piores 5% dos casos (Conditional Value at Risk)")

        with col3:
            st.metric("Volatilidade Anual", f"{np.std(retornos) * np.sqrt(252):.2%}",
                      help="Volatilidade anualizada dos retornos")

    def _plot_importancia_features(self):
        try:
            importances = self.modelo_carregado.modelo_final.feature_importances_
            features = self.modelo_carregado.features_selecionadas

            df_imp = pd.DataFrame({'feature': features, 'importance': importances}).sort_values('importance',
                                                                                                ascending=False).head(
                15)

            fig = go.Figure()
            fig.add_trace(go.Bar(
                x=df_imp['importance'],
                y=df_imp['feature'],
                orientation='h',
                marker_color='#1f77b4'
            ))
            fig.update_layout(
                title="Top 15 Vari√°veis Mais Importantes",
                yaxis=dict(autorange="reversed"),
                xaxis_title="Import√¢ncia (calculada pelo LightGBM)",
                height=500,
                margin=dict(l=20, r=20, t=40, b=20)
            )
            st.plotly_chart(fig, use_container_width=True)

            # Adicionar explica√ß√£o
            with st.expander("üí° Como interpretar a import√¢ncia das features?"):
                st.markdown("""
                A import√¢ncia mostra o quanto cada vari√°vel contribui para as decis√µes do modelo:

                - **Valores mais altos**: Vari√°veis mais importantes para o modelo
                - **Valores mais baixos**: Vari√°veis com menor influ√™ncia

                Esta m√©trica √© calculada pelo LightGBM baseado em quantas vezes uma feature √© usada 
                para fazer divis√µes nas √°rvores de decis√£o e qu√£o efetivas s√£o essas divis√µes.
                """)

        except Exception as e:
            st.warning(f"N√£o foi poss√≠vel gerar o gr√°fico de import√¢ncia de features: {e}")

    def _exibir_metricas_backtest(self, metricas: Dict[str, Any]):
        cols = st.columns(5)
        cols[0].metric("Retorno Total (Sim.)", f"{metricas.get('retorno_total', 0):.2%}")
        cols[1].metric("Sharpe Ratio (Sim.)", f"{metricas.get('sharpe', 0):.2f}")
        cols[2].metric("Max Drawdown (Sim.)", f"{metricas.get('max_drawdown', 0):.2%}")
        cols[3].metric("Taxa de Acerto (Sim.)", f"{metricas.get('win_rate', 0):.2%}")
        cols[4].metric("N¬∫ de Trades (Sim.)", f"{metricas.get('trades', 0)}")

    def _calcular_win_rate_estimado(self, metricas: Dict[str, Any]) -> float:
        """Calcula uma estimativa da taxa de acerto baseada no F1-Score."""
        f1 = metricas.get('f1_macro_medio', 0)
        # F√≥rmula simplificada para estimar win rate a partir do F1
        return min(0.95, max(0.05, f1 * 0.8))


if __name__ == "__main__":
    if 'y_full' not in st.session_state:
        st.session_state.y_full = None

    dashboard = DashboardTrading()
    dashboard.executar()
